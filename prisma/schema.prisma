generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===== SISTEMA DE AUTENTICACIÓN Y RBAC =====

// Usuarios del sistema
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  sessions      UserSession[]
  userRoles     UserRole[]
  
  @@map("users")
}

// Sesiones y tokens de usuario
model UserSession {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  accessToken   String   @unique @map("access_token") @db.VarChar(500)
  refreshToken  String   @unique @map("refresh_token") @db.VarChar(500)
  expiresAt     DateTime @map("expires_at")
  isRevoked     Boolean  @default(false) @map("is_revoked")
  lastActivity  DateTime @default(now()) @map("last_activity")
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relaciones
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

// Roles del sistema (RBAC futuro)
model Role {
  id            Int      @id @default(autoincrement())
  roleName      String   @unique @map("role_name")
  description   String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  userRoles     UserRole[]
  rolePermissions RolePermission[]
  
  @@map("roles")
}

// Permisos del sistema (RBAC futuro)
model Permission {
  id              Int      @id @default(autoincrement())
  permissionName  String   @map("permission_name")
  moduleName      String   @map("module_name")
  description     String?
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relaciones
  rolePermissions RolePermission[]
  
  @@unique([permissionName, moduleName])
  @@map("permissions")
}

// Tabla intermedia: Usuario - Rol
model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

// Tabla intermedia: Rol - Permiso
model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  
  // Relaciones
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Sector {
  id        Int           @id @default(autoincrement())
  nombre    String        @unique
  alianzas  Alianza[]
  funcionarios Funcionario[]
  actasFundicion ActaFundicion[]
  actasArrime ActaArrime[]
  alianzasPequenaMineria AlianzaPequenaMineria[]
  actasArrimePequenaMineria ActaArrimePequenaMineria[]
}

model Alianza {
  id                      Int      @id @default(autoincrement())
  nombre                  String
  rif                     String   @unique
  fechaConstitucion       DateTime
  representanteLegal      String
  estatus                 Estatus
  poseenMinas             Boolean
  numeroLineas            Int
  direccionPlanta         String
  correoEmpresa           String
  telefonoEmpresa         String
  capacidadInstalada      String
  capacidadOperativa      String
  sectorId                Int
  sector                  Sector   @relation(fields: [sectorId], references: [id])
  funcionarios            Funcionario[]
  actasFundicion ActaFundicion[]
  actasArrime ActaArrime[]
  saldoDeuda              Float    @default(0) // Nuevo campo: saldo total pendiente de la alianza
  movimientosSaldo        HistorialMovimientoSaldo[]
  saldosAFavor            SaldoAFavor[]
  elusiones               Elusion[]
  barrasDeOro             BarraDeOro[]
}

enum Estatus {
  ACTIVA
  INACTIVA
}

model Funcionario {
  id              Int      @id @default(autoincrement())
  nombres         String
  apellidos       String
  tipoCedula      TipoCedula
  cedula          Int      @unique
  correo          String
  telefono        String
  estatus         EstatusFuncionario
  sectorId        Int
  sector          Sector   @relation(fields: [sectorId], references: [id])
  alianzaId       Int
  alianza         Alianza  @relation(fields: [alianzaId], references: [id])
  actasArrime ActaArrime[]
  actasArrimePequenaMineria ActaArrimePequenaMineria[]
}

enum TipoCedula {
  V
  E
}

enum EstatusFuncionario {
  ACTIVO
  VACACIONES
  REPOSO
  PERMISO
}

model ActaFundicion {
  id                Int              @id @default(autoincrement())
  sectorId          Int
  sector            Sector           @relation(fields: [sectorId], references: [id])
  alianzaId         Int
  alianza           Alianza          @relation(fields: [alianzaId], references: [id])
  rifAlianza        String
  fechaFundicion    DateTime
  numeroActa        String           @unique
  barras            BarraFundida[]
  actasCobranza     ActaCobranza[]
}

model ActaCobranza {
  id                Int              @id @default(autoincrement())
  actaFundicion     ActaFundicion    @relation(fields: [actaFundicionId], references: [id])
  actaFundicionId   Int
  correlativo       String
  hora              DateTime
  totalCobranza     Float
  saldoActual       Float    @default(0) // Nuevo campo: saldo restante de la cobranza
  estado            EstadoCobranza   @default(PENDIENTE)
  createdAt         DateTime         @default(now())
  documentUrl       String?          // Ruta del documento generado
  detallesArrime    DetalleArrimeCobranza[]
  movimientosSaldo  HistorialMovimientoSaldo[]
  aplicacionesSaldoAFavor  AplicacionSaldoAFavor[]
}

enum EstadoCobranza {
  PENDIENTE
  SALDADA
}

model BarraFundida {
  id                Int              @id @default(autoincrement())
  actaId            Int
  acta              ActaFundicion    @relation(fields: [actaId], references: [id])
  numeroBarra       Int
  totalBruto        Float
  promedioLey       Float
  totalFino         Float
  precintoBarra     String
}

// ===== BARRAS DE ORO Y ACTAS F2 (MEJORADO) =====

// Barras de oro disponibles para refundición (F2)
model BarraDeOro {
  id                Int              @id @default(autoincrement())
  identificador     String           @unique // Identificador único de la barra
  pesoBruto         Float            // Peso bruto en gramos
  tipoLey           Float            // Pureza (ej: 999.9, 995, etc.)
  pesoFino          Float            // Peso fino calculado (pesoBruto * tipoLey / 1000)
  origen            String           // Origen: alianza, inventario, pequeña minería, etc.
  precintoBarra     String?          // Precinto opcional
  observaciones     String?
  fechaCreacion     DateTime         @default(now())
  
  // ✅ MEJORA: Relación directa con Acta F2 (sin tabla intermedia)
  refundida         Boolean          @default(false)
  actaFundicionF2Id Int?             // NULL = no refundida, NOT NULL = refundida
  actaFundicionF2   ActaFundicionF2? @relation(fields: [actaFundicionF2Id], references: [id])
  
  // Relaciones con origen (trazabilidad)
  alianzaId         Int?
  alianza           Alianza?         @relation(fields: [alianzaId], references: [id])
  alianzaPequenaMineriaId Int?
  alianzaPequenaMineria AlianzaPequenaMineria? @relation("BarrasPequenaMineria", fields: [alianzaPequenaMineriaId], references: [id])
  actaArrimePequenaMineriaId Int?
  actaArrimePequenaMineria ActaArrimePequenaMineria? @relation(fields: [actaArrimePequenaMineriaId], references: [id])
  
  // Índices para performance
  @@index([refundida])
  @@index([actaFundicionF2Id])
  @@index([alianzaId])
}

// Actas de Fundición F2 (refundición)
model ActaFundicionF2 {
  id                Int              @id @default(autoincrement())
  numeroActa        String           @unique // Formato: F2-YYYY-MM-NNNN (generado automáticamente)
  fechaActa         DateTime         // Fecha de la fundición
  fechaCreacion     DateTime         @default(now())
  
  // Pesos y cálculos
  pesoTotalPiezas   Float            // Suma de pesos brutos de las barras seleccionadas
  pesoFinalBarra    Float            // Peso de la barra resultante después de fundición
  merma             Float            // Diferencia: pesoTotalPiezas - pesoFinalBarra
  
  observaciones     String?
  documentUrl       String?          // Ruta del documento generado
  
  // ✅ MEJORA: Relación inversa simple (one-to-many)
  piezasUtilizadas  BarraDeOro[]     // Todas las barras que tienen actaFundicionF2Id = este id
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([fechaActa])
  @@index([numeroActa])
}

model ActaArrime {
  id                Int      @id @default(autoincrement())
  sectorId          Int
  sector            Sector   @relation(fields: [sectorId], references: [id])
  alianzaId         Int
  alianza           Alianza  @relation(fields: [alianzaId], references: [id])
  funcionarioId     Int
  funcionario       Funcionario @relation(fields: [funcionarioId], references: [id])
  representanteLegal String
  rifAlianza        String
  nomenclatura      String   @unique
  fecha             DateTime @default(now())
  piezas            Int
  pesoBruto         Float
  tipoLey           String
  pesoFino          Float
  observaciones     String
  barras            BarraArrime[] // Relación con las barras de arrime
  detallesCobranza  DetalleArrimeCobranza[]
  saldosAFavor      SaldoAFavor[]
}

model BarraArrime {
  id                Int         @id @default(autoincrement())
  actaArrimeId      Int
  actaArrime        ActaArrime  @relation(fields: [actaArrimeId], references: [id])
  numeroBarra       Int
  pesoBruto         Float       // Peso bruto de la barra (usado para cálculos de deuda)
  promedioLey       Float       // Ley promedio (solo referencia)
  pesoFino          Float       // Peso fino calculado (solo referencia)
  precintoBarra     String?     // Precinto opcional
}

model DetalleArrimeCobranza {
  id             Int          @id @default(autoincrement())
  actaArrimeId   Int
  actaArrime     ActaArrime   @relation(fields: [actaArrimeId], references: [id])
  actaCobranzaId Int
  actaCobranza   ActaCobranza @relation(fields: [actaCobranzaId], references: [id])
  montoAplicado  Float

  @@unique([actaArrimeId, actaCobranzaId])
}

model HistorialMovimientoSaldo {
  id            Int      @id @default(autoincrement())
  alianzaId     Int?
  alianza       Alianza? @relation(fields: [alianzaId], references: [id])
  actaCobranzaId Int?
  actaCobranza  ActaCobranza? @relation(fields: [actaCobranzaId], references: [id])
  tipo          TipoMovimientoSaldo
  monto         Float
  saldoAntes    Float
  saldoDespues  Float
  descripcion   String?
  fecha         DateTime @default(now())
}

model SaldoAFavor {
  id              Int      @id @default(autoincrement())
  alianzaId       Int
  actaArrimeId    Int?
  monto           Float
  montoDisponible Float
  descripcion     String
  estado          EstadoSaldoAFavor @default(DISPONIBLE)
  fechaCreacion   DateTime @default(now())
  fechaUso        DateTime?

  alianza     Alianza     @relation(fields: [alianzaId], references: [id])
  actaArrime  ActaArrime? @relation(fields: [actaArrimeId], references: [id])
  aplicaciones AplicacionSaldoAFavor[]
}

model AplicacionSaldoAFavor {
  id              Int      @id @default(autoincrement())
  saldoAFavorId   Int
  actaCobranzaId  Int
  montoAplicado   Float
  fechaAplicacion DateTime @default(now())
  descripcion     String

  saldoAFavor  SaldoAFavor  @relation(fields: [saldoAFavorId], references: [id])
  actaCobranza ActaCobranza @relation(fields: [actaCobranzaId], references: [id])
}

enum TipoMovimientoSaldo {
  COBRANZA_GENERADA
  APLICACION_ARRIME
  EXCEDENTE_ARRIME
  APLICACION_SALDO_FAVOR
  AJUSTE_MANUAL
  COBRANZA_SALDADA
  OTRO
}

enum EstadoSaldoAFavor {
  DISPONIBLE
  PARCIALMENTE_USADO
  AGOTADO
}

model Elusion {
  id                     Int      @id @default(autoincrement())
  numero                 Int      // Número secuencial de elusión en el mes para la alianza
  fechaInicio            DateTime // Fecha de inicio de elusión
  fechaFundicionEstimada DateTime // Fecha estimada de fundición
  numeroLinea            String   // Número de línea operativa
  validada               Boolean  @default(false)
  alianza                Alianza  @relation(fields: [alianzaId], references: [id])
  alianzaId              Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

// === PEQUEÑA MINERÍA ===

enum TipoPersona {
  NATURAL
  JURIDICA
}

model AlianzaPequenaMineria {
  id                      Int      @id @default(autoincrement())
  rifCedula               String   @unique // RIF o Cédula de identidad
  nombre                  String   // Nombre de la sociedad mercantil o persona natural
  tipoPersona             TipoPersona
  representanteLegal      String?  // Solo para personas jurídicas
  sectorId                Int
  sector                  Sector   @relation(fields: [sectorId], references: [id])
  estatus                 Estatus  @default(ACTIVA)
  fechaRegistro           DateTime @default(now())
  
  // Información adicional
  direccion               String?
  telefono                String?
  correo                  String?
  
  // Relaciones
  actasArrime             ActaArrimePequenaMineria[]
  barrasDeOro             BarraDeOro[] @relation("BarrasPequenaMineria")
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model ActaArrimePequenaMineria {
  id                      Int      @id @default(autoincrement())
  numeroActa              String   // Número de acta de arrime (permite duplicados)
  fechaArrime             DateTime // Fecha de arrime
  montoPesoBruto          Float    // Monto arrime peso bruto
  
  // Relaciones
  alianzaId               Int
  alianza                 AlianzaPequenaMineria @relation(fields: [alianzaId], references: [id])
  sectorId                Int
  sector                  Sector   @relation(fields: [sectorId], references: [id])
  
  // Información adicional
  observaciones           String?
  funcionarioId           Int?
  funcionario             Funcionario? @relation(fields: [funcionarioId], references: [id])
  
  // Barras registradas
  barras                  BarraArrimePequenaMineria[]
  
  // Barras de oro generadas para F2
  barrasDeOro             BarraDeOro[]
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  // Índice para consultas rápidas por número de acta
  @@index([numeroActa, fechaArrime])
}

model BarraArrimePequenaMineria {
  id                      Int      @id @default(autoincrement())
  actaArrimeId            Int
  actaArrime              ActaArrimePequenaMineria @relation(fields: [actaArrimeId], references: [id])
  numeroBarra             Int
  pesoBruto               Float    // Peso bruto de la barra
  pesoFino                Float?   // Peso fino (opcional pero recomendado)
  ley                     Float?   // Ley de la barra (opcional)
  precintoBarra           String?  // Precinto opcional
}